<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bigice</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://big-ice.github.io/"/>
  <updated>2018-04-09T14:14:20.418Z</updated>
  <id>http://big-ice.github.io/</id>
  
  <author>
    <name>Bigice</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>aText 与系统文本替换的同步</title>
    <link href="http://big-ice.github.io/2018/04/09/aText%E4%B8%8E%E7%B3%BB%E7%BB%9F%E6%96%87%E6%9C%AC%E6%9B%BF%E6%8D%A2%E7%9A%84%E5%90%8C%E6%AD%A5/"/>
    <id>http://big-ice.github.io/2018/04/09/aText与系统文本替换的同步/</id>
    <published>2018-04-09T13:44:48.058Z</published>
    <updated>2018-04-09T14:14:20.418Z</updated>
    
    <content type="html"><![CDATA[<p>文本替换是 iOS、macOS 上一项很实用的功能，但是对于各位 Power User 来说，iOS 上的文本替换或许是够用了，但 macOS 上大家都会选择其他更专业的文本替换软件，比如大名鼎鼎的 <a href="https://textexpander.com/" target="_blank" rel="noopener">TextExpander</a>，或是性价比更高的 <a href="www.trankynam.com/atext/">aText</a>。</p><p>TextExpander 作为订阅类 App，iOS、macOS 双平台都有，但是价格不菲，而且 iOS 版对中文支持不好，所以我选择的方案是在 iOS 上用系统的文本替换，在 macOS 上用 aText。</p><p>但是这就产生了一个问题：同步。在 aText 里存储的短语，如果不能在 iOS 端使用是一件很苦恼的事。为了解决这个问题，就要用到 macOS 文本替换和 iOS 能同步这一特点。我利用这一点打造了一套自动化地同步 aText 和系统文本替换的工作流。</p><p>首先我简述一下这个工作流。</p><ol><li>导出 aText 数据，为 .rtf 格式。</li><li>用命令行将 .rtf 格式 转化为 .txt 格式。</li><li>用 Python 处理 .txt 文本，获得 .plist 文件。</li><li>系统文本替换能够自动解析 .plist 文件，并在双平台同步。</li></ol><h2 id="处理-rtf"><a href="#处理-rtf" class="headerlink" title="处理 .rtf"></a>处理 .rtf</h2><p>这里用到了 macOS 自带的命令行工具 textutil，使用格式为：<br><code>textutil -convert txt FILE.rtf</code></p><h2 id="将-txt-转化为-plist"><a href="#将-txt-转化为-plist" class="headerlink" title="将 txt 转化为 plist"></a>将 txt 转化为 plist</h2><p>这里用到了 Python 自带的库 plistlib，可以生成 macOS 独有的 plist 格式。在这之前我们来看看为何是 plist 文件。打开 macOS 文本替换，将其中的一个短语拖出来，用 Xcode 打开，可以看到其中的数据结构是这样的：<br><img src="/uploads/aText 与系统文本替换的同步/Screen%20Shot%202018-04-09%20at%2019.33.35.png" class="full-image"><br>整体是一个数组形式，里面的 item 是字典，两个键分别是 phrase 和 shortcut 。任何具有这样结构的 plist 文件，都可以被系统文本替换解析。这样一来，用 Python 就可以很简单的生成这样的 plist 文件了。核心代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import plistlib </span><br><span class="line"></span><br><span class="line">def writeToPlist(array):</span><br><span class="line">plistlib.writePlist(array,&quot;/Users/bigice/Documents/text.plist&quot;)</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">with open(&quot;/Users/bigice/Documents/aText Snippets.txt&quot;,encoding=&quot;utf-8&quot;) as file:</span><br><span class="line">#处理文本</span><br><span class="line">text = file.readlines()</span><br><span class="line">for i in range(len(text)):</span><br><span class="line">text[i] = text[i][:-1]</span><br><span class="line">t = text[1:-1]</span><br><span class="line"></span><br><span class="line">shortcut = []</span><br><span class="line">phrase = []</span><br><span class="line">for i in range(len(t)):</span><br><span class="line">if i%2 == 0:</span><br><span class="line">shortcut.append(t[i])</span><br><span class="line">else:</span><br><span class="line">phrase.append(t[i])</span><br><span class="line">array = []</span><br><span class="line">for i in range(len(shortcut)):</span><br><span class="line">array.append(dict(phrase=phrase[i],shortcut=shortcut[i]))</span><br><span class="line"></span><br><span class="line">writeToPlist(array)</span><br><span class="line"></span><br><span class="line">main()</span><br></pre></td></tr></table></figure></p><h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>最后将生成的 plist 文件拖入文本替换中，在通过 iCloud 同步，一切都完成了。</p><p>但是这样还是不够自动化，我们再把这些步骤用自动化工具整合一下，当文件夹中检测到 .rtf 文件，自动调用命令行工具生成 .txt 文件，当检测到 .txt 文件，自动调用 Python 程序，生成 plist 文件，移动到桌面，然后自动打开文本替换界面，最后再拖一下，大功告成。这里我用 <a href="https://www.noodlesoft.com/" target="_blank" rel="noopener">Hazel</a> 写了几个动作，仅供参考。</p><p>首先是将 rtf 转化为 txt：<br><img src="/uploads/aText 与系统文本替换的同步/Screen%20Shot%202018-04-09%20at%2019.38.17.png" class="full-image"><br>然后将 txt 转化为 plist：<br><img src="/uploads/aText 与系统文本替换的同步/Screen%20Shot%202018-04-09%20at%2021.40.13.png" class="full-image"><br>然后将 plist 移动到桌面：<br><img src="/uploads/aText 与系统文本替换的同步/Screen%20Shot%202018-04-09%20at%2019.39.50.png" class="full-image"><br>最后打开文本替换界面：<br><img src="/uploads/aText 与系统文本替换的同步/Screen%20Shot%202018-04-09%20at%2019.40.12.png" class="full-image"><br>OK，一个自动化同步文本片段的功能就完成了。整个过程其实很简单，但对于一些没有编程基础的人来说，这个教程应该有些许参考价值。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;文本替换是 iOS、macOS 上一项很实用的功能，但是对于各位 Power User 来说，iOS 上的文本替换或许是够用了，但 macOS 上大家都会选择其他更专业的文本替换软件，比如大名鼎鼎的 &lt;a href=&quot;https://textexpander.com/&quot; t
      
    
    </summary>
    
      <category term="效率" scheme="http://big-ice.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="AppleScript" scheme="http://big-ice.github.io/tags/AppleScript/"/>
    
      <category term="Hazel" scheme="http://big-ice.github.io/tags/Hazel/"/>
    
      <category term="aText" scheme="http://big-ice.github.io/tags/aText/"/>
    
      <category term="macOS" scheme="http://big-ice.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS 如何用 Shift 一键切换原生输入法</title>
    <link href="http://big-ice.github.io/2018/02/20/macOS%20%E5%A6%82%E4%BD%95%E7%94%A8%20Shift%20%E4%B8%80%E9%94%AE%E5%88%87%E6%8D%A2%E5%8E%9F%E7%94%9F%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <id>http://big-ice.github.io/2018/02/20/macOS 如何用 Shift 一键切换原生输入法/</id>
    <published>2018-02-20T14:15:12.802Z</published>
    <updated>2018-02-20T15:58:41.480Z</updated>
    
    <content type="html"><![CDATA[<p>几年前刚用 Mac 的时候，因为之前用 Windows 的习惯，所以用的是搜狗输入法。后来随着 macOS 自带输入法的成熟，我开始使用 macOS 原生输入法。但是搜狗输入法的按 Shift 键切换中英文特别好用，反倒是原生输入法的中英切换时常发生故障，于是我干脆直接关闭了原生输入法的中英切换功能，将 CapsLock 键换成了 Hyper 键。</p><p>但是换了之后要按两个键才能切换输入法，这个问题一直困扰着我，直到我遇见了 Karabiner-Elements。Karabiner-Elements 是一个能将键盘键位自由映射到其他按键的应用，今天先介绍点它的简单用法。</p><p>首先到<a href="https://pqrs.org/osx/karabiner/" target="_blank" rel="noopener">这里</a>下载最新的 Karabiner-Elements。安装完成后的界面是这样的。</p><p><img src="/uploads/macOS 如何用 Shift 一键切换原生输入法/Karabiner-Elements1.png" class="full-image"></p><p>先到第二栏 Function Keys 中将 f12 设置为 f12。</p><p><img src="/uploads/macOS 如何用 Shift 一键切换原生输入法/Karabiner-Elements2.png" class="full-image"></p><p>然后到第三栏 Complex Modifications，选择 <strong>Add rule</strong> -&gt; <strong>Import more rules from the Internet(open a web browser)</strong>, 在网站上找到我们需要的 rules: <strong>Tapping modifier-keys produces a f-key</strong>，最后将 <strong>Press left_shift alone produces F12</strong> Enable，这样 Karabiner-Elements 中的设置就完成了。</p><p><img src="/uploads/macOS 如何用 Shift 一键切换原生输入法/Karabiner-Elements3.png" class="full-image"></p><p>接着就去到设置里，将切换输入法的快捷键设置成 F12，这样就可以按左 Shift 键一键切换输入法了。</p><p><img src="/uploads/macOS 如何用 Shift 一键切换原生输入法/shortcut.png" class="full-image"></p><p>ps：如果没有成功，看一下是否有快捷键冲突。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;几年前刚用 Mac 的时候，因为之前用 Windows 的习惯，所以用的是搜狗输入法。后来随着 macOS 自带输入法的成熟，我开始使用 macOS 原生输入法。但是搜狗输入法的按 Shift 键切换中英文特别好用，反倒是原生输入法的中英切换时常发生故障，于是我干脆直接关闭
      
    
    </summary>
    
      <category term="效率" scheme="http://big-ice.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="效率" scheme="http://big-ice.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>用 Drafts + LaunchBar + Evernote 打造 Daily Record 系统</title>
    <link href="http://big-ice.github.io/2018/02/13/drafts+launchbar+evernnote/"/>
    <id>http://big-ice.github.io/2018/02/13/drafts+launchbar+evernnote/</id>
    <published>2018-02-13T10:59:49.809Z</published>
    <updated>2018-02-20T04:53:10.368Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于 <a href="https://itunes.apple.com/cn/app/drafts-quick-capture/id905337691?mt=8" target="_blank" rel="noopener">Drafts 4</a>、<a href="https://www.obdev.at/products/launchbar/index.html" target="_blank" rel="noopener">LaunchBar</a>、<a href="https://www.yinxiang.com/" target="_blank" rel="noopener">Evernote</a>。</p><p>有一种生活方式是这样的：随时随地记录自己当前正在做的事。《奇特的一生》中柳比歇夫就是这么做的。下面摘抄一段：</p><blockquote><p>乌里扬诺夫斯克。一九六四年四月七日。<br>分类昆虫学（画两张无名袋蛾的图）——三小时十五分。<br>基本工作合计——六小时二十分。鉴定袋蛾——二十分（1．0）<br>附加工作：给斯拉瓦写信——二小时四十五分（0．5）。<br>社会工作：植物保护小组开会——二小时二十五分。<br>休息：给伊戈尔写信——十分；<br>《乌里扬诺夫斯克真理报》——十分；<br>列夫·托尔斯泰的《塞瓦斯托波尔纪事》——一小时二十五分。<br>基本工作合计——六小时二十分。</p></blockquote><p>这种方式固然不适合所有人，但是从中借鉴一些也没有什么坏处。比如突发的灵感需要记录，好的句子想要摘抄，这些在信息管理的过程中属于信息的收集，我觉得也可以纳入这种方式中。于是我开始着手打造我自己的 Daily Record 系统。我想做到一下几点：</p><ul><li>iOS、macOS 双平台同步</li><li>尽可能简化的操作</li><li>按日期分类，井井有条</li></ul><h2 id="iOS-端"><a href="#iOS-端" class="headerlink" title="iOS 端"></a>iOS 端</h2><p>首先是 iOS 端，手机作为日常生活中最不可或缺的一部分，用它来记录自己的生活真是在合适不过了。那么什么工具能够最简单地记录文字呢？那当然是大名鼎鼎的 Drafts 了，之前少数派就有好几篇介绍 Drafts 的文章，有兴趣可以去看看。（听说最近 Drafts 5 要出了，所以没入手的还是不建议最近入手）</p><p>那么记录完了该怎么做呢？我们的目标是将每一天的记录合并到一条记录中，以日期为标题，所以我这里选择了 API 相当开放的，同步性也很好的 Evernote 了。<br>在 Drafts 中，Evernote 的 API 已经直接集成在其中，只要授权一下，就可以直接使用了。具体使用如下：</p><ol><li><p>新建一个 Action</p></li><li><p>选择 STEPS 新建一个 step</p></li><li><p>选择 Evernote</p></li><li><p>填写 Title，Notebook</p></li><li><p>选择 append</p></li></ol><p>这里的 Title 使用了 date formatter 的形式，Notebook 是事先在 Evernote 中建好的一个笔记本。截图如下：<br>  <div align="center"><img src="/uploads/01/drafts-setting.PNG" width="40%" ,height="40%"></div></p><p>  ​</p><p>然后我们来看看实际效果：</p>  <div align="center"> <img src="/uploads/01/iOStest.PNG" width="40%" ,height="40%" )=""></div><p>  ​</p><p>  ​</p><h2 id="macOS-端"><a href="#macOS-端" class="headerlink" title="macOS 端"></a>macOS 端</h2><p>macOS 端上我选择用 LaunchBar 来做记录，原因无他，启动快，和其他应用联动性好，而且官方提供了一个 Evernote 的动作和我们想要达成的效果差不多。</p><p>首先我们来看一下官方的动作：传进去一段文本，然后新建一条笔记。</p><p><img src="/uploads/01/newnote.png" class="full-image"></p><p><img src="/uploads/01/test.png" class="full-image"><br>而我们想要的是传进去一段文本，合并到以相应日期为标题的笔记中，这个需要写一点点 AppleScript 代码。做成之后结果如下：</p><p><img src="/uploads/01/daily.png" class="full-image"><br><img src="/uploads/01/test.png" class="full-image"><br><img src="/uploads/01/record.png" class="full-image"><br>那么我们来看看是怎么实现的。首先我们打开 Action Editor，选中 All Actions 然后点击边栏右下的小锁按钮，找到被锁定的官方动作：Evernote - New Note With Text，右键复制，然后修改副本的名称，标识等，最后修改代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">on handlestring(content)</span><br><span class="line">set today to current date</span><br><span class="line">set m to ((month of today) * 1) as string</span><br><span class="line">set d to (day of today) as string</span><br><span class="line">if m as number is less than 10 then</span><br><span class="line">set m to &quot;0&quot; &amp; m</span><br><span class="line">end if</span><br><span class="line">if d as number is less than 10 then</span><br><span class="line">set d to &quot;0&quot; &amp; d</span><br><span class="line">end if</span><br><span class="line">set todaystring to (year of today &amp; &quot;-&quot; &amp; m &amp; &quot;-&quot; &amp; d) as string</span><br><span class="line">tell application &quot;Evernote&quot;</span><br><span class="line">set notebook1 to notebook named &quot;Daily&quot;</span><br><span class="line">set note1 to (find notes todaystring)</span><br><span class="line">if note1 is not  then</span><br><span class="line">tell first item of note1 to append text &quot;\n&quot; &amp; content</span><br><span class="line">else</span><br><span class="line">create note title todaystring with text &quot;&quot; notebook notebook1</span><br><span class="line">end if</span><br><span class="line">end tell</span><br><span class="line">end handlestring</span><br></pre></td></tr></table></figure><p>这里多说一句，因为 Drafts 的格式化日期的月份显示是02，而 AppleScript 中的日期月份是2，所以我在代码中人为地加了0，使得 Evernote 中能够标题相同。</p><p>如此一来，就大功告成了。整个系统以 Evernote 为中心，但是并不直接操纵它，而是通过外部接口访问，体现了良好的封装性（大雾）。可能有人会问为什么不直接用 Evernote 记录，因为它打开太慢了，而且打开后还要找具体的笔记太麻烦；为什么不用自带的备忘录，因为它开放的接口不够，不能自定义一些标题或者追加一些文本；为什么不用其他的工具诸如 Workflow 、Alfred，因为这篇文章说到底提供的是一种方法论，你可以用其他工具实现相同的功能，我选择这些工具不过是我的习惯罢了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文基于 &lt;a href=&quot;https://itunes.apple.com/cn/app/drafts-quick-capture/id905337691?mt=8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Drafts 4&lt;/a&gt;、&lt;a href=
      
    
    </summary>
    
      <category term="效率" scheme="http://big-ice.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="AppleScript" scheme="http://big-ice.github.io/tags/AppleScript/"/>
    
      <category term="LaunchBar" scheme="http://big-ice.github.io/tags/LaunchBar/"/>
    
      <category term="效率" scheme="http://big-ice.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://big-ice.github.io/2018/02/12/hello-world/"/>
    <id>http://big-ice.github.io/2018/02/12/hello-world/</id>
    <published>2018-02-12T06:59:34.349Z</published>
    <updated>2018-02-12T11:08:16.423Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一篇博文，写于 2018/2/12。</p><p>今年我上大二，学习编程也有一年半了。其实早在一年前我就有过搭建博客的想法，但是当时才疏学浅（当然现在也是），肚子里没多少货，估计也写不出什么干货，于是博客的计划就暂时搁置了。经过一年半的学习，课内课外都有所收获，于是今天就搭建了基于 <a href="https://github.com" target="_blank" rel="noopener">Github</a> 的博客，用于输出一些学到的知识，自己的想法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是我的第一篇博文，写于 2018/2/12。&lt;/p&gt;
&lt;p&gt;今年我上大二，学习编程也有一年半了。其实早在一年前我就有过搭建博客的想法，但是当时才疏学浅（当然现在也是），肚子里没多少货，估计也写不出什么干货，于是博客的计划就暂时搁置了。经过一年半的学习，课内课外都有所收获，
      
    
    </summary>
    
      <category term="随笔" scheme="http://big-ice.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://big-ice.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
